generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id                  Int       @id
  lastUpdate          DateTime  @default(now())
  name                String
  state               State?    @relation("StateRegions", fields: [stateId], references: [id])
  stateId             Int?
  autonomy            Autonomy? @relation("AutonomyRegions", fields: [autonomyId], references: [id])
  autonomyId          Int?
  needResidencyToWork Boolean   @default(false)
  taxRate             Float     @default(0)
  marketTaxes         Float     @default(0)
  factoryOutputTaxes  Json
  profitShare         Float     @default(0)
  seaAccess           Boolean   @default(false)
  buildings           Json
  resources           Json
  citizens            Player[]  @relation("RegionCitizens")
  residents           Player[]  @relation("RegionResidents")
  parties             Party[]
  factories           Factory[] @relation("RegionFactories")
  // borderRegions       Region[] @relation("BorderRegions")
  regionPermits       Player[]
}

model Player {
  id                       Int       @id
  lastUpdate               DateTime  @default(now())
  name                     String
  level                    Int       @default(30)
  exp                      Int       @default(0)
  perk_str                 Int       @default(0)
  perk_edu                 Int       @default(0)
  perk_end                 Int       @default(0)
  region                   Region?   @relation("RegionCitizens", fields: [regionId], references: [id])
  regionId                 Int?
  residency                Region?   @relation("RegionResidents", fields: [residencyId], references: [id])
  residencyId              Int?
  leaderOfState            State?    @relation("LeaderOfState", fields: [leaderOfStateId], references: [id])
  leaderOfStateId          Int?      @unique
  econMinisterOfState      State?    @relation("EconMinisterOfState", fields: [econMinisterOfStateId], references: [id])
  econMinisterOfStateId    Int?      @unique
  foreignMinisterOfState   State?    @relation("ForeignMinisterOfState", fields: [foreignMinisterOfStateId], references: [id])
  foreignMinisterOfStateId Int       @unique
  governorOfAuto           Autonomy? @relation("GovernorOfAuto", fields: [governorOfAutoId], references: [id])
  governorOfAutoId         Int?      @unique
  party                    Party?    @relation("PartyPlayers", fields: [partyId], references: [id])
  partyId                  Int?
  storage                  Storage   @relation("PlayerStorage", fields: [storageId], references: [id])
  storageId                Int       @unique
  factories                Factory[] @relation("PlayerFactories")
  statePermits             State[]
  regionPermits            Region[]
}

model State {
  id                Int        @id
  lastUpdate        DateTime   @default(now())
  name              String
  // capital           Region
  // capitalId         Int
  governmentForm    String     @default("dictatorship")
  leader            Player?    @relation("LeaderOfState")
  leaderIsCommander Boolean    @default(false)
  econMinister      Player?    @relation("EconMinisterOfState")
  foreignMinister   Player?    @relation("ForeignMinisterOfState")
  leaderTermStart   DateTime?
  storage           Storage    @relation("StateStorage", fields: [storageId], references: [id])
  storageId         Int        @unique
  Bloc              Bloc?      @relation(fields: [blocId], references: [id])
  blocId            Int?
  regions           Region[]   @relation("StateRegions")
  autonomies        Autonomy[] @relation("StateAutonomies")
  permits           Player[]
}

model Autonomy {
  id         Int      @id
  lastUpdate DateTime @default(now())
  name       String
  state      State?   @relation("StateAutonomies", fields: [stateId], references: [id])
  stateId    Int?
  governor   Player?  @relation("GovernorOfAuto")
  governorId Int?
  storage    Storage  @relation("AutonomyStorage", fields: [storageId], references: [id])
  storageId  Int      @unique
  regions    Region[] @relation("AutonomyRegions")
}

model Storage {
  id            Int       @id @default(autoincrement())
  ownerPlayer   Player?   @relation("PlayerStorage")
  ownerState    State?    @relation("StateStorage")
  ownerAutonomy Autonomy? @relation("AutonomyStorage")
  stateMoney    Int       @default(0)
  stateGold     Int       @default(0)
  stateOil      Int       @default(0)
  stateOre      Int       @default(0)
  stateUranium  Int       @default(0)
  stateDiamonds Int       @default(0)
  money         Int       @default(0)
  gold          Int       @default(0)
  oil           Int       @default(0)
  ore           Int       @default(0)
  uranium       Int       @default(0)
  diamonds      Int       @default(0)
  liquidOxygen  Int       @default(0)
  helium3       Int       @default(0)
  rivalium      Int       @default(0)
  antirad       Int       @default(0)
  energyDrink   Int       @default(0)
  spaceRockets  Int       @default(0)
  lss           Int       @default(0)
  tanks         Int       @default(0)
  aircrafts     Int       @default(0)
  missiles      Int       @default(0)
  bombers       Int       @default(0)
  battleships   Int       @default(0)
  laserDrones   Int       @default(0)
  moonTanks     Int       @default(0)
  spaceStations Int       @default(0)
}

model Party {
  id       Int     @id
  name     String
  region   Region? @relation(fields: [regionId], references: [id])
  regionId Int?

  players Player[] @relation("PartyPlayers")
}

model Factory {
  id       Int    @id
  name     String
  player   Player @relation("PlayerFactories", fields: [playerId], references: [id])
  playerId Int
  region   Region @relation("RegionFactories", fields: [regionId], references: [id])
  regionId Int
  type     String
  level    Int
}

model Bloc {
  id   Int    @id
  name String

  states State[]
}
